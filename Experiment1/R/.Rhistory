AIC(lmer_13) - AIC(lmer_14) #
merged_GRE_PPE$RaterID<-as.factor(merged_GRE_PPE$RaterID)
str(merged_GRE_PPE)
lmer_14<-glmer(Proportion_MLE ~ Cond + (1|RaterID) , data =merged_GRE_PPE, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
summary(lmer_14)
AIC(lmer_13) - AIC(lmer_14) #
lmer_18<-glmer(Proportion_MLE~ Cond + rescale_gap_sqrt+ (1|RaterID) , data =merged_GRE_PPE, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(lmer_18)
AIC(lmer_14) - AIC(lmer_18)
install.packages("geepack")
install.packages("MESS")
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap_sqrt, data =merged_GRE_PPE, family = "binomial", id=RaterID, corstr="independence")
summary(geeModel1)
library("geepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
require(geepack)
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap_sqrt, data =merged_GRE_PPE, family = "binomial", id=RaterID, corstr="independence")
summary(geeModel1)
View(merged_GRE_PPE)
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap_sqrt, data =merged_GRE_PPE, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel1)
merged_GRE_PPE_nomissing<-merged_GRE_PPE[complete.cases(merged_GRE_PPE), ]
View(merged_GRE_PPE_nomissing)
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap_sqrt, data =merged_GRE_PPE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel1)
Gplot_predicted_gap<-plot_model(geeModel1, type="eff", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
plot_model(geeModel1,transform = "plogis",show.values = TRUE, value.offset = .3)
plot_model(geeModel1,show.values = TRUE, value.offset = .3)
Gplot_predicted_score<-plot_model(geeModel1, type="eff", terms = "Cond")
?sjplot
?plot_model()
Gplot_predicted_score<-plot_model(geeModel1, type="est", terms = "Cond")
Gplot_predicted_score<-plot_model(geeModel1, type="pred", terms = "Cond")
Gplot_predicted_score<-plot_model(geeModel1, type="eff", terms = "Cond")
Gplot_predicted_gap<-plot_model(geeModel1, type="eff", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
plot_model(geeModel1,transform = "plogis",show.values = TRUE, value.offset = .3)
plot_model(geeModel1,show.values = TRUE, value.offset = .3)
Gplot_predicted_gap<-plot_model(geeModel1, type="pred", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
est <- esticon(geeModel1, diag(5))
?esticon
??esticon
est <- esticon(geeModel1, diag(5))
geeModel1_gee <- merged_GRE_PPE_nomissing %>%
mutate(pred_gee = predict(geeModel1, type = "response"))
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = treatment)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
###ploting model results
cc <- coef(summary(geeModel1))
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
rownames(citab) <- rownames(cc)
citab
cc
summary(geeModel1)
cc
citab
summary(geeModel1)
citab
geeModel1_gee
cc <- coef(summary(geeModel1_gee))
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
rownames(citab) <- rownames(cc)
citab
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+geom_ribbon(aes(ymin=geeModel1_gee$lower, ymax=geeModel1_gee$upper), linetype=2, alpha=0.1)
citab
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+geom_ribbon(aes(ymin=citab$lwr, ymax=citab$upr), linetype=2, alpha=0.1)
citab<-as.data.frame(citab)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+geom_ribbon(aes(ymin=citab$lwr, ymax=citab$upr), linetype=2, alpha=0.1)
View(geeModel1_gee)
cc
geeModel1_gee_ci <- with(geeModel1_gee,
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
geeModel1_gee_ci <- with(geeModel1_gee,
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
geeModel1_gee_ci <- with(geeModel1_gee,
cbind(lwr=pred_gee-1.96*Std.err,
upr=pred_gee+1.96*Std.err))
?se
geeModel1_gee_ci <- with(geeModel1_gee,
cbind(lwr=pred_gee-1.96*se,
upr=pred_gee+1.96*se))
View(geeModel1_gee)
(summary(geeModel1_gee)
summary(geeModel1_gee)
cc <- coef(summary(geeModel1))
cc
geeModel1_ci <- with(geeModel1,
cbind(lwr=geeModel1-1.96*Std.err,
upr=geeModel1+1.96*Std.err))
geeModel1_ci <- with(geeModel1,
cbind(lwr=cc-1.96*Std.err,
upr=cc+1.96*Std.err))
geeModel1_ci <- with(geeModel1,
cbind(lwr=cc-1.96*Std.err,
upr=cc+1.96*Std.err))
geeModel1_ci <- with(cc,
cbind(lwr=cc-1.96*Std.err,
upr=cc+1.96*Std.err))
geeModel1_ci
cc <- coef(summary(geeModel1))
cc
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
citab
rownames(citab) <- rownames(cc)
citab
cc <- summary(geeModel1)
cc
cc <- coef(summary(geeModel1))
cc
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
citab
rownames(citab) <- rownames(cc)
citab<-as.data.frame(citab)
citab
cc<-cbind(cc,citab)
cc
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
View(geeModel1_gee)
plotData <- geeModel1_gee[!is.na(Score),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee)),by="Cond"]
plotData <- geeModel1_gee[!is.na(Score),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee)),by=list(Cond)]
plotData <- geeModel1_gee[!is.na(Score),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee)),by=c("Cond")]
plotData <- geeModel1_gee[!is.na(pred_gee),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee)),by=list(Cond)]
plotData <- geeModel1_gee[!is.na(pred_gee),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee))]
geeModel1_gee <- merged_GRE_PPE_nomissing %>%
mutate(pred_gee = predict(geeModel1, type = "response"))
plotData <- geeModel1_gee[!is.na(pred_gee),list(Pred=mean(pred_gee),Lower=mean(pred_gee)-se(pred_gee),Upper=mean(pred_gee)+se(pred_gee))]
plotData <- geeModel1_gee[!is.na(geeModel1_gee$pred_gee),list(Pred=mean(geeModel1_gee$pred_gee),Lower=mean(geeModel1_gee$pred_gee)-se(geeModel1_gee$pred_gee),Upper=mean(geeModel1_gee$pred_gee)+se(geeModel1_gee$pred_gee))]
##standard error
se <- function(x) {sd(x)/sqrt(length(x))}
plotData <- geeModel1_gee[!is.na(geeModel1_gee$pred_gee),list(Pred=mean(geeModel1_gee$pred_gee),Lower=mean(geeModel1_gee$pred_gee)-se(geeModel1_gee$pred_gee),Upper=mean(geeModel1_gee$pred_gee)+se(geeModel1_gee$pred_gee))]
plotData <- geeModel1_gee[!is.na(geeModel1_gee$pred_gee),list(Pred=mean(geeModel1_gee$pred_gee),Lower=mean(geeModel1_gee$pred_gee)-se(geeModel1_gee$pred_gee),Upper=mean(geeModel1_gee$pred_gee)+se(geeModel1_gee$pred_gee)),by=list(geeModel1_gee$Cond)]
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_summary(geom="ribbon", fun.ymin="min", fun.ymax="max", aes(fill=Cond), alpha=0.3)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
# geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_summary(geom="ribbon", fun.ymin="min", fun.ymax="max", aes(fill=Cond), alpha=0.3)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_summary(geom="ribbon", fun.ymin="min", fun.ymax="max", aes(fill=Cond), alpha=0.3)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_smooth(method="loess", span=0.1, se=TRUE, aes(fill=Cond), alpha=0.3)
View(geeModel1_gee)
summary(geeModel1_gee)
str(geeModel1_gee)
geeModel1_gee$pred_gee<-as.numeric(geeModel1_gee$pred_gee)
str(geeModel1_gee)
plotData <- geeModel1_gee[!is.na(geeModel1_gee$pred_gee),list(Pred=mean(geeModel1_gee$pred_gee),Lower=mean(geeModel1_gee$pred_gee)-se(geeModel1_gee$pred_gee),Upper=mean(geeModel1_gee$pred_gee)+se(geeModel1_gee$pred_gee)),by=list(geeModel1_gee$Cond)]
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_smooth(method="loess", span=0.1, se=TRUE, aes(fill=Cond), alpha=0.3)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_smooth(method="ribbon", span=0.1, se=TRUE, aes(fill=Cond), alpha=0.3)
summary(geeModel1_gee)
str(geeModel1_gee)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
# geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_smooth(method="ribbon", span=0.1, se=TRUE, aes(fill=Cond), alpha=0.3)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line() +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")+stat_smooth(method="ribbon", span=0.1, se=TRUE, aes(fill=Cond), alpha=0.3)
tgc <- summarySE(geeModel1_gee, measurevar="pred_gee", groupvars=c("Cond"))
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
tgc <- summarySE(geeModel1_gee, measurevar="pred_gee", groupvars=c("Cond"))
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
tgc <- summarySE(geeModel1_gee, measurevar="pred_gee", groupvars=c("Cond"))
tgc <- summarySE(geeModel1_gee, measurevar="pred_gee", groupvars=c("Cond"))
tgc
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
Gplot_predicted_score<-plot_model(geeModel1, type="eff", terms = "Cond")
Gplot_predicted_gap<-plot_model(geeModel1, type="pred", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
my.ggp.yrange <- ggplot_build(geeModel1_gee)$data
my.ggp.yrange <- ggplot_build(geeModel1)$data
geeModel1
summary(geeModel1)
coef(summary(geeModel1))
?predict()
?predict
summary(geeModel1)
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap_sqrt, data =merged_GRE_PPE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel1)
geeModel1_gee <- merged_GRE_PPE_nomissing %>%
mutate(pred_gee = predict(geeModel1, type = "response"))
View(geeModel1_gee)
geeModel1_gee$pred_gee<-as.numeric(geeModel1_gee$pred_gee)
str(geeModel1)
summary(geeModel1)
summary(geeModel1_gee)
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
merged_GRE_nomissing<-merged_GRE[complete.cases(merged_GRE), ]
View(merged_GRE_nomissing)
geeModel2<-geeglm(Proportion~ Cond + rescale_gap_sqrt, data =merged_GRE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel2)
coef(summary(geeModel2))
geeModel2_gee <- merged_GRE_nomissing %>%
mutate(pred_gee = predict(geeModel2, type = "response"))
View(geeModel2_gee)
geeModel2_gee$pred_gee<-as.numeric(geeModel2_gee$pred_gee)
ggplot(geeModel2_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
ggplot(geeModel2_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) + ylim(0.4, 0.9)
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
ggplot(geeModel2_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) + ylim(0.4, 0.9)+
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
ggplot(geeModel1_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +ylim(0.4, 0.9)+
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap, data =merged_GRE_PPE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel1)
coef(summary(geeModel1))
### add a column (pred_gee) for predicted probabilities
geeModel1_gee <- merged_GRE_PPE_nomissing %>%
mutate(pred_gee = predict(geeModel1, type = "response"))
geeModel1_gee$pred_gee<-as.numeric(geeModel1_gee$pred_gee)
## plot
ggplot(geeModel1_gee, aes(x = rescale_gap, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) +ylim(0.4, 0.9)+
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
geeModel2<-geeglm(Proportion~ Cond + rescale_gap, data =merged_GRE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel2)
coef(summary(geeModel2))
### add a column (pred_gee) for predicted probabilities
geeModel2_gee <- merged_GRE_nomissing %>%
mutate(pred_gee = predict(geeModel2, type = "response"))
geeModel2_gee$pred_gee<-as.numeric(geeModel2_gee$pred_gee)
## plot
ggplot(geeModel2_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) + ylim(0.4, 0.9)+
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
lmer_18<-glmer(Proportion_MLE~ Cond + rescale_gap_sqrt+ (1|RaterID) , data =merged_GRE_PPE, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(lmer_18)
Gplot_predicted_gap<-plot_model(lmer_18, type="pred", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
#' get they-axis ranges actually used in the graph
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="PPE",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities for \nPPE Outcomes") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.09, y=0.82, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.60, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14)) +scale_fill_manual(values=c("#E41A1C","#377EB8"))
View(merged_GRE_PPE)
View(merged_GRE_PPE)
hist(merged_GRE_PPE$rescale_gap)
hist(merged_GRE_PPE$rescale_gap_sqrt)
require(MASS) ##transofrmation
?boxcox
hist(merged_GRE_PPE$Scr_Break)
hist(merged_GRE_PPE$rescale_gap)
hist(merged_GRE_PPE$rescale_gap_sqrt)
hist(merged_GRE_PPE$sqrt(Scr_Break))
merged_GRE_PPE$Scr_Break_sqrt<- sqrt(merged_GRE_PPE$Scr_Break)
View(merged_GRE_PPE)
hist(merged_GRE_PPE$Scr_Break_sqrt)
lmer_18<-glmer(Proportion_MLE~ Cond + Scr_Break_sqrt+ (1|RaterID) , data =merged_GRE_PPE, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(lmer_18)
Gplot_predicted_gap<-plot_model(lmer_18, type="pred", terms = c("rescale_gap_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
Gplot_predicted_gap<-plot_model(lmer_18, type="pred", terms = c("Scr_Break_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="PPE",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities for \nPPE Outcomes") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.09, y=0.82, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.60, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14)) +scale_fill_manual(values=c("#E41A1C","#377EB8"))
merged_GRE$Scr_Break_sqrt<- sqrt(merged_GRE$Scr_Break)
View(merged_GRE)
lmer_11<-glmer(Proportion ~ Cond + Scr_Break_sqrt+ (1|RaterID) , data =merged_GRE, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
summary(lmer_11)
Gplot_predicted_gap<-plot_model(lmer_11, type="eff", terms = c("Scr_Break_sqrt", "Cond"), colors = "gs",show.legend = FALSE)
Gplot_predicted_gap
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="Raters",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities \n for Being Exact") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.1, y=0.97, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.79, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14))+ scale_fill_manual(values=c("#E41A1C", "#377EB8"))
lmer_11<-glmer(Proportion ~ Cond + rescale_gap+ (1|RaterID) , data =merged_GRE, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
summary(lmer_11)
Gplot_predicted_gap<-plot_model(lmer_11, type="eff", terms = c("rescale_gap", "Cond"), colors = "gs",show.legend = FALSE)
Gplot_predicted_gap
#' get they-axis ranges actually used in the graph
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="Raters",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities \n for Being Exact") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.1, y=0.97, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.79, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14))+ scale_fill_manual(values=c("#E41A1C", "#377EB8"))
Gplot_predicted_gap+labs(title="Raters",
x="Scoring Gap (gap/365)", y="Predicted Probabilities \n for Being Exact") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.1, y=0.97, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.79, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14))+ scale_fill_manual(values=c("#E41A1C", "#377EB8"))
Gplot_predicted_gap+labs(title="Raters",
x="Scoring Gap (gap/365)", y="Predicted Probabilities \n for Being Exact") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.1, y=0.97, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.08, y=0.79, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14))+ scale_fill_manual(values=c("#E41A1C", "#377EB8"))
merged_GRE_nomissing<-merged_GRE[complete.cases(merged_GRE), ]
geeModel2<-geeglm(Proportion~ Cond + rescale_gap, data =merged_GRE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel2)
coef(summary(geeModel2))
geeModel2_gee <- merged_GRE_nomissing %>%
mutate(pred_gee = predict(geeModel2, type = "response"))
geeModel2_gee$pred_gee<-as.numeric(geeModel2_gee$pred_gee)
ggplot(geeModel2_gee, aes(x = rescale_gap_sqrt, y = pred_gee,fill=Cond)) +
geom_line(aes(color = Cond)) +
theme_bw(base_size = 16) + ylim(0.4, 0.9)+
xlab("Scaled and Transformed Days in Gap") +
ylab("Predicted Probabilities of Being Exact")
merged_GRE_PPE_nomissing<-merged_GRE_PPE[complete.cases(merged_GRE_PPE), ]
geeModel1<-geeglm(Proportion_MLE~ Cond + rescale_gap, data =merged_GRE_PPE_nomissing, family = "binomial", id=RaterID, corstr="exchangeable")
summary(geeModel1)
coef(summary(geeModel1))
lmer_11<-glmer(Proportion ~ Cond + rescale_gap+ (1|RaterID) , data =merged_GRE, family = "binomial", control = glmerControl(optimizer = "bobyqa"))
summary(lmer_11)
Gplot_predicted_gap<-plot_model(lmer_11, type="eff", terms = c("rescale_gap", "Cond"), colors = "gs",show.legend = FALSE)
Gplot_predicted_gap
#' get they-axis ranges actually used in the graph
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="Raters",
x="Scoring Gap (gap/365)", y="Predicted Probabilities \n for Being Exact") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.1, y=0.97, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.08, y=0.79, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14))+ scale_fill_manual(values=c("#E41A1C", "#377EB8"))
View(merged_GRE)
lmer_18<-glmer(Proportion_MLE~ Cond + Scr_Break_sqrt+ (1|RaterID) , data =merged_GRE_PPE, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(lmer_18)
lmer_18<-glmer(Proportion_MLE~ Cond + rescale_gap+ (1|RaterID) , data =merged_GRE_PPE, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa",optCtrl=list(maxfun=2e5)))
summary(lmer_18)
#' get they-axis ranges actually used in the graph
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="PPE",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities for \nPPE Outcomes") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.09, y=0.82, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.60, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14)) +scale_fill_manual(values=c("#E41A1C","#377EB8"))
Gplot_predicted_gap<-plot_model(lmer_18, type="pred", terms = c("rescale_gap", "Cond"), colors = "gs",show.legend = FALSE)
#' get they-axis ranges actually used in the graph
my.ggp.yrange <- ggplot_build(Gplot_predicted_gap)$data
Gplot_predicted_gap+labs(title="PPE",
x="Scaled and Transformed Scoring Gap (sqrt((gap/365))", y="Predicted Probabilities for \nPPE Outcomes") +
theme_bw() + ylim(0.3, 1)+ annotate(geom="text", x=0.09, y=0.82, label="Calibration",
color="#E41A1C")+annotate(geom="text", x=0.09, y=0.60, label="Validity",
color="#377EB8")+
theme(plot.title=element_text(size=16, face="bold"),axis.title=element_text(size=16),
axis.text.x=element_text(size=14), axis.text.y=element_text(size=14)) +scale_fill_manual(values=c("#E41A1C","#377EB8"))
summary(lmer_11)
summary(lmer_18)
View(merged_GRE_PPE)
save.image("~/OneDrive - Educational Testing Service/Bridgid/Analysis_BA/NCME/GRE_calibration_validity_per_day_merged.RData")
